const api = require('node-telegram-bot-api')
const token = '5727778025:AAG7Knt5kXBcpijxpdR2NcPw1Ik6wgaAoCY';
const bot = new api(token, {polling: true})

const scripters_chat = -1001668697872
const orderState = {
    none : 0,
    typeSelection: 1,
    priceSelection: 2,
    message: 3
}



bot.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å DevSearch'},
    {command: '/buy', description: '–ó–∞–∫–∞–∑–∞—Ç—å'},
    {command: '/scripters', description: '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'}
])

const buttons = {}
const users = {
    '1912381': {
        last_message: 0,
        banned: false,
        state: orderState.none,
        new_order: {price: 'none_price', comment: 'none_comment'},
        developer: {
            blasthack_profile: '',
            blasthack_thread: '',
            payment: '',
            contacts: ''
        },
        orders: []
    }
}

//orders
const orders = [
    /*{
        sender: {username: 'ya_chapo', id: -1},
        chat_id: -1,
        notification_message_id: -1,
        taken: false,
        date: {created: 'none', taken: 'none'},
        taken_by: {username: 'ya_chapo_dev', id: -1},
        done: false,
        price: 'none',
        comment: 'none'
    }*/
] 

const mainKeyboard = [
    ['üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å'],
    ['üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'],
    ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
] 

bot.on('message', async msg => {
    const text = msg.text
    const sender = msg.from.username
    const senderId = msg.from.id
    if (!users[toString(senderId)]) {
        users[toString(senderId)] = {
            new_order: {price: 'none_price', comment: 'none_comment'},
            last_message: 0,
            banned: false,
            state: orderState.none,
            orders: []
        }
    }

    if (users[toString(senderId)].developer) {
        if (text.includes('/ban')) {
            const banUser = text.match('/ban (.+)')[1]
            if (!banUser) {
                return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏')
            }
            if (!users[banUser.toString()]) {
                return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            }
            users[banUser.toString()].banned = true
            return await bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        }
    }
    
    if (text == '/start') {
        bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>DevSearch Bot</b>, —á—Ç–æ –±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ <b>Lua, JavaScript, TypeScript, Python –∏–ª–∏ C++</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å"</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy', {
            reply_markup: { 
                keyboard: mainKeyboard,
                parse_mode: 'HTML'
            },
        }
        )
    }else if (text == '/get_chat_id') { 
        return await bot.sendMessage(msg.chat.id, `Chat ID: ${msg.chat.id}`) 
    }else if (text === '/buy' || text == 'üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å') {
        users[toString(senderId)].state = orderState.priceSelection
        return await bot.sendMessage(
            msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑?', {reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: '100 - 300 —Ä—É–±–ª–µ–π', callback_data: 'price:100 - 300 —Ä—É–±.'}, {text: '300 - 500 —Ä—É–±–ª–µ–π', callback_data: 'price:300 - 500 —Ä—É–±.'}, {text: '100 - 500 —Ä—É–±–ª–µ–π', callback_data: 'price:500 - 1000 —Ä—É–±.'}],
                    [{text: '–î–æ–≥–æ–≤–æ—Ä–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', callback_data: 'price:–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}],
                    [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'price_cancel'}]
                ]
            })}
        )
    } else if (text == 'üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π') {

    } else if (text == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') {
        return await bot.sendMessage(msg.chat.id, '<b><a href="https://www.blast.hk/threads/161825/">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</a></b>', {parse_mode: 'HTML'})
    }
    
    

    if (users[toString(senderId)].state == orderState.message) {
        if (text.length <= 24) {
            return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º: 24 —Å–∏–º–≤–æ–ª–∞)')
        }
        users[toString(senderId)].state = orderState.none
        users[toString(senderId)].new_order.comment = text
        const this_order_id = orders.length
        const notification = await bot.sendMessage(
            scripters_chat, 
            `üîî<b>–ó–∞–∫–∞–∑ </b> #${this_order_id} –æ—Ç @${sender} (id:<code>${msg.from.id}</code>)
    ‚Ä¢ üí∞<b>–¶–µ–Ω–∞: </b>${users[toString(senderId)].new_order.price}
    ‚Ä¢ üí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${users[toString(senderId)].new_order.comment}
            
    <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ–°–≤–æ–±–æ–¥–µ–Ω
            `,
            {
                reply_markup: JSON.stringify({ inline_keyboard: [[{text: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', callback_data: `take_order:${this_order_id}`}]]}), 
                parse_mode: 'HTML'
            }
        )
        console.log('notification')
        console.log(notification)
        orders.push(
            {
                sender: {username: sender, id: senderId},
                chat_id: notification.chat.id,
                notification_message_id: notification.message_id,
                taken: false,
                date: {created: 'none', taken: 'none'},
                taken_by: {username: 'ya_chapo_dev', id: -1},
                done: false,
                price: users[toString(senderId)].new_order.price,
                comment: users[toString(senderId)].new_order.comment
            }
        )
        return await bot.sendMessage(msg.chat.id, '‚úÖ–ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!')
    }
})


bot.on('callback_query', async msg => {
    const data = msg.data
    const sender = msg.from.username
    const senderId = msg.from.id
    console.log(msg)
    
    if (!users[toString(senderId)]) {
        return await bot.sendMessage(senderId, 'error, use /buy!')
    }
    console.log('[DEBUG] [CHAT DATA] callback_query:')
    console.log(msg)
    if (!sender) {
        return await bot.sendMessage(senderId, 'callback_query -> !sender')
    }

    if (data.includes('take_order:')) {
        const order_id = data.match('take_order:(.+)')[1]
        if (!order_id) { 
            return await bot.sendMessage(senderId, '–û—à–∏–±–∫–∞, order_id = null')
        }

        if (!orders[Number(order_id)]) {
            return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
        }

        if (orders[Number(order_id)].taken) {
            return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç! (–≤–∑—è–ª: @${orders[Number(order_id)].taken_by.username}`)
        } 
        orders[Number(order_id)].taken = true
        orders[Number(order_id)].taken_by = {username: sender, id: senderId}
        // edit message  list[Number(order_id)].notification_message_id
        await bot.editMessageText(`üîî<b>–ó–∞–∫–∞–∑ </b> #${order_id} –æ—Ç @${orders[Number(order_id)].sender.username} (id:<code>${orders[Number(order_id)].sender.id}</code>)
        ‚Ä¢ üí∞<b>–¶–µ–Ω–∞: </b>${orders[Number(order_id)].price}
        ‚Ä¢ üí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${orders[Number(order_id)].comment}
                
        <b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå–ó–∞–Ω—è—Ç, –ø—Ä–∏–Ω—è–ª: @${sender} (id:<code>${senderId}</code>))`, {
            message_id: orders[Number(order_id)].notification_message_id,
            chat_id: scripters_chat,
            parse_mode: 'HTML'
        })
        //bot.sendMessage(orders[Number(order_id)].chat_id, )
        //await bot.sendMessage(orders[Number(order_id)].chat_id, `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @${sender}(id:<code>${senderId}</code>) –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ #${order_id}!`, {parse_mode: 'HTML'})
        console.log(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @${sender} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #${order_id} (–æ—Ç @${orders[Number(order_id)].sender.username})`)
    }

    if (data == 'price_cancel' || data == 'comment_cancel') {
        users[toString(senderId)].state = orderState.none
        return await bot.sendMessage(senderId, '–û—Ç–º–µ–Ω–µ–Ω–æ.')
    }
    if (data.includes('price:')) {
        console.log('price selected!')
        const price = data.match('price:(.+)')[1]
        if (!price) { return await bot.sendMessage(senderId, 'error, price is null') }

        console.log('user price set to', price, 'was', data)
        users[toString(senderId)].new_order.price = price
        users[toString(senderId)].state = orderState.message
        return await bot.sendMessage(senderId, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Ç–æ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (—É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫)', {reply_markup: JSON.stringify({
            inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'comment_cancel'}]]})}
        )
    }
    
})





/*

function isUserAdmin(username) {
    for (var index = 0; index < users.length; index ++) {
        if (username === users[index]) {
            return true;
        }
    }
    return false;
}

function isUserBanned(username) {
    for (var index = 0; index < banned_users.length; index ++) {
        if (username === banned_users[index]) {
            return true;
        }
    }
    return false;
}

-------


    if (isUserBanned(sender)) { return await bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!') }
    if (!msg.from && !isUserAdmin(sender)) { return await bot.sendMessage(msg.from.id, '–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö') } 

    // admin commands
    if (isUserAdmin(sender)) {
        if (text.includes('/ban')) {
            const ban_user = text.match('/ban @(.+)')
            if (!ban_user) { 
                return await bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º!')
            } 
            if (isUserBanned(ban_user)) {
                return await bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
            }
            if (isUserAdmin(ban_user)) {
                return await bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
            }
            banned_users.push(ban_user)
            return await bot.sendMessage(msg.from.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ban_user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`)
        }
    }
    */