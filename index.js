const api = require('node-telegram-bot-api')
const token = '5727778025:AAG7Knt5kXBcpijxpdR2NcPw1Ik6wgaAoCY';
const bot = new api(token, {polling: true})

const scripters_chat = -1001668697872
const orderState = {
    none : 0,
    typeSelection: 1,
    priceSelection: 2,
    message: 3
}
const mainKeyboard = [
    ['üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å'],
    ['üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'],
    ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
] 

let users = {
    '407057857': {
        last_message: 0,
        banned: false,
        state: orderState.none,
        new_order: {price: '', comment: ''},
        developer: {
            blasthack_profile: 'https://www.blast.hk/members/112329/',
            blasthack_thread: 'https://www.blast.hk/threads/109259/',
            payment: 'QIWI, –°–ë–ï–†',
            contacts: 'tg: @ya_chapo, vk: @ya_chapo'
        },
        orders: []
    }
}
let banlist = []
let orders = []
/*
"orders" item example: 
{
    sender: {username: 'ya_chapo', id: -1},
    chat_id: -1,
    notification_message_id: -1,
    taken: false,
    date: {created: 'none', taken: 'none'},
    taken_by: {username: 'ya_chapo_dev', id: -1},
    done: false,
    price: 'none',
    comment: 'none'
}
*/



bot.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å DevSearch'},
    {command: '/buy', description: '–ó–∞–∫–∞–∑–∞—Ç—å'},
    {command: '/scripters', description: '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'}
])

// Callbacks
bot.on('message', async msg => {
    const text = msg.text
    const sender = msg.from.username
    const senderId = msg.from.id   
    console.log(msg)
    
    try {
        // does user exists in "db" xd
        if (!users[senderId]) {
            users[senderId] = {
                new_order: {price: 'none_price', comment: 'none_comment'},
                last_message: 0,
                banned: false,
                state: orderState.none,
                orders: []
            }
        }

       

        // dev commands
        if (users[senderId].developer) {
            if (text == '/banlist') {
                return await bot.sendMessage(msg.chat.id, `–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n${banlist.join('\n\t')}`)
            } else if (text.includes('/ban')) {
                let banUser = text.match('/ban (.+)')
                if (!banUser) { return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏') }
                banlist.push(Number(banUser[1]))
                return await bot.sendMessage(msg.chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banUser[1]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`)
            } else if (text.includes('/unban')) {
                let banUser = text.match('/unban (.+)')
                if (!banUser) { return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏') }
                if (!banlist.includes(Number(banUser[1]))) { return await bot.sendMessage(msg.chat.id, `–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banUser[1]} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`) }
                banlist = banlist.filter(v => v !== Number(banUser[1]))
                return await bot.sendMessage(msg.chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banUser[1]} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`)
            } 
        }

        // is user developer
        if (text == '/ya_razrab_ili_cho') {
            return await bot.sendMessage(msg.chat.id, `user ${senderId} ${users[senderId].developer ? '+' : '-'}`)
        }

        // is user banned
        if (banlist.includes(senderId)) {
            return await bot.sendPhoto(msg.chat.id, 'https://cdn.discordapp.com/attachments/854686750168186880/1055096544094855178/image.png', {caption: '‚ùå –û—à–∏–±–∫–∞, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!'})
        }

        if (msg.chat.type != 'private' && msg.chat.id != scripters_chat) { return }
        
        if (text == '/start') {
            bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>DevSearch Bot</b>, —á—Ç–æ –±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ <b>Lua, JavaScript, TypeScript, Python –∏–ª–∏ C++</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å"</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy', 
                {
                    reply_markup: { keyboard: mainKeyboard },
                    parse_mode: 'HTML'
                }
            )
        }else if (text == '/get_chat_id') { 
            return await bot.sendMessage(msg.chat.id, `Chat ID: ${msg.chat.id}`) 
        }else if (text === '/buy' || text == 'üõéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å') {
            users[senderId].state = orderState.priceSelection
            return await bot.sendMessage(
                msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑?', {reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '100 - 300 —Ä—É–±–ª–µ–π', callback_data: 'price:100 - 300 —Ä—É–±.'}, {text: '300 - 500 —Ä—É–±–ª–µ–π', callback_data: 'price:300 - 500 —Ä—É–±.'}, {text: '100 - 500 —Ä—É–±–ª–µ–π', callback_data: 'price:500 - 1000 —Ä—É–±.'}],
                        [{text: '–î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', callback_data: 'price:–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}],
                        [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'price_cancel'}]
                    ]
                })}
            )
        } else if (text == 'üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π') {
            return await bot.sendMessage(msg.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ :)', {parse_mode: 'HTML'})
        } else if (text == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') {
            return await bot.sendMessage(msg.chat.id, '<b><a href="https://www.blast.hk/threads/161825/">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</a></b>', {parse_mode: 'HTML'})
        } else {
            if (users[senderId].state == orderState.message) {
                if (text.length <= 24) {
                    return await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞, —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º: 24 —Å–∏–º–≤–æ–ª–∞)')
                }
                
                
                // anti flood
                const cooldown = users[senderId].last_message + 300000 - Date.now()
                if (cooldown <= 0) {
                    users[senderId].state = orderState.none
                    users[senderId].new_order.comment = text
                    const this_order_id = orders.length
                    const notification = await bot.sendMessage(
                        scripters_chat, 
                        //`üîî<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\nüôç‚Äç‚ôÇÔ∏è<b>–ó–∞–∫–∞–∑—á–∏–∫:</b>@${orders[Number(order_id)].sender.username} (id:<code>${orders[Number(order_id)].sender.id}</code>)\nüí∞<b>–¶–µ–Ω–∞: </b>${orders[Number(order_id)].price}\nüí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${orders[Number(order_id)].comment}\n\n‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–Ω—è—Ç, –ø—Ä–∏–Ω—è–ª: @${sender} (id:<code>${senderId}</code>)`, {
                        `üîî<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\nüôç‚Äç‚ôÇÔ∏è<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @${sender} (id:<code>${msg.from.id}</code>)\nüí∞<b>–¶–µ–Ω–∞: </b>${users[senderId].new_order.price}\nüí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${users[senderId].new_order.comment}\n\n‚úÖ<b>–°—Ç–∞—Ç—É—Å:</b> –°–≤–æ–±–æ–¥–µ–Ω`,
                        {
                            reply_markup: JSON.stringify({ inline_keyboard: [[{text: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', callback_data: `take_order:${this_order_id}`}]]}), 
                            parse_mode: 'HTML'
                        }
                    )
                    console.log('notification')
                    console.log(notification)
                    orders.push(
                        {
                            sender: {username: sender, id: senderId},
                            chat_id: notification.chat.id,
                            notification_message_id: notification.message_id,
                            taken: false,
                            date: {created: 'none', taken: 'none'},
                            taken_by: {username: 'ya_chapo_dev', id: -1},
                            done: false,
                            price: users[senderId].new_order.price,
                            comment: users[senderId].new_order.comment
                        }
                    )
                    bot.pinChatMessage(scripters_chat, notification.message_id)
                    users[senderId].last_message = Date.now()
                    return await bot.sendMessage(msg.chat.id, '‚úÖ–ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!')
                } else {
                    return await bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${Math.floor(cooldown / 1000)} —Å–µ–∫—É–Ω–¥!`)
                }
            }
        }
    } catch(err) {
        //return await bot.sendMessage(msg.chat.id, `ERROR IN 'message':\n${err}`)
    }
})


bot.on('callback_query', async msg => {
    const data = msg.data
    const sender = msg.from.username
    const senderId = msg.from.id
    console.log(msg)
    
    
    try {
        if (banlist.includes(senderId)) { return await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!') }
        //if (!users[senderId]) { return await bot.sendMessage(senderId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start :(') }
        if (!sender) { return await bot.sendMessage(senderId, 'callback_query -> !sender') }

        // take order
        if (data.includes('take_order:')) {
            const order_id = data.match('take_order:(.+)')[1]
            if (!order_id) { return await bot.sendMessage(senderId, '–û—à–∏–±–∫–∞, order_id = null') }
            if (!orders[Number(order_id)]) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`) }
            if (orders[Number(order_id)].taken) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç! (–≤–∑—è–ª: @${orders[Number(order_id)].taken_by.username}`) } 
            orders[Number(order_id)].taken = true
            orders[Number(order_id)].taken_by = {username: sender, id: senderId}
            await bot.editMessageText(`üîî<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\nüôç‚Äç‚ôÇÔ∏è<b>–ó–∞–∫–∞–∑—á–∏–∫:</b>@${orders[Number(order_id)].sender.username} (id:<code>${orders[Number(order_id)].sender.id}</code>)\nüí∞<b>–¶–µ–Ω–∞: </b>${orders[Number(order_id)].price}\nüí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${orders[Number(order_id)].comment}\n\n‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–Ω—è—Ç, –ø—Ä–∏–Ω—è–ª: @${sender} (id:<code>${senderId}</code>)`, {
                message_id: orders[Number(order_id)].notification_message_id,
                chat_id: scripters_chat,
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({ inline_keyboard: [[{text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å`, callback_data: `cancel_order:${order_id}`}, {text: `‚úîÔ∏è –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω`, callback_data: `done_order:${order_id}`}]]}), 
            })
            await bot.unpinChatMessage(scripters_chat, {message_id: orders[Number(order_id)].notification_message_id})
            console.log(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @${sender} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #${order_id} (–æ—Ç @${orders[Number(order_id)].sender.username})`)
        }

        // cancel order
        if (data.includes('cancel_order:')) {
            const order_id = data.match('cancel_order:(.+)')[1]
            if (!order_id) { return await bot.sendMessage(senderId, '–û—à–∏–±–∫–∞, order_id = null') }
            if (!orders[Number(order_id)]) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`) }
            //if (orders[Number(order_id)].taken) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç! (–≤–∑—è–ª: @${orders[Number(order_id)].taken_by.username}`) } 
            if (senderId == orders[Number(order_id)].taken_by.id) {
                orders[Number(order_id)].taken = false
                orders[Number(order_id)].taken_by = {username: 'undefined', id: -1}
                await bot.editMessageText(`üîî<b>–ó–∞–∫–∞–∑ </b> #${order_id} –æ—Ç @${orders[Number(order_id)].sender.username} (id:<code>${orders[Number(order_id)].sender.id}</code>)\n‚Ä¢ üí∞<b>–¶–µ–Ω–∞: </b>${orders[Number(order_id)].price}\n‚Ä¢ üí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${orders[Number(order_id)].comment}\n-\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖC–≤–æ–±–æ–¥–µ–Ω`, {
                    message_id: orders[Number(order_id)].notification_message_id,
                    chat_id: scripters_chat,
                    parse_mode: 'HTML',
                    reply_markup: JSON.stringify({ inline_keyboard: [[{text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å`, callback_data: `take_order:${order_id}`}]]}), 
                })
                console.log(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @${sender} –û–¢–ú–ï–ù–ò–õ –∑–∞–∫–∞–∑ #${order_id} (–æ—Ç @${orders[Number(order_id)].sender.username})`)
            } else {
                return await bot.answerCallbackQuery(msg.id, {show_alert: true, text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –ø—Ä–∏–Ω—è–ª!', callback_query_id: msg.id})
            }
        }

        // mark order as done
        if (data.includes('done_order:')) {
            const order_id = data.match('done_order:(.+)')[1]
            if (!order_id) { return await bot.sendMessage(senderId, '–û—à–∏–±–∫–∞, order_id = null') }
            if (!orders[Number(order_id)]) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`) }
            //if (orders[Number(order_id)].taken) { return await bot.sendMessage(senderId, `–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ #${order_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç! (–≤–∑—è–ª: @${orders[Number(order_id)].taken_by.username}`) } 
            if (senderId == orders[Number(order_id)].taken_by.id) {
                orders[Number(order_id)].done = true
                await bot.editMessageText(`‚úÖ<b>–í—ã–ø–æ–ª–Ω–∏–ª:</b> @${orders[Number(order_id)].taken_by.username}\nüîî<b>–ó–∞–∫–∞–∑ </b> #${order_id} –æ—Ç @${orders[Number(order_id)].sender.username} (id:<code>${orders[Number(order_id)].sender.id}</code>)\nüí∞<b>–¶–µ–Ω–∞: </b>${orders[Number(order_id)].price}\nüí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b> ${orders[Number(order_id)].comment}`, {
                    message_id: orders[Number(order_id)].notification_message_id,
                    chat_id: scripters_chat,
                    parse_mode: 'HTML',
                    //reply_markup: JSON.stringify({ inline_keyboard: [[{text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å`, callback_data: `take_order:${order_id}`}]]}), 
                })
                await bot.unpinChatMessage(scripters_chat, {message_id: orders[Number(order_id)].notification_message_id})
                console.log(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @${sender} –í–´–ü–û–õ–ù–ò–õ –∑–∞–∫–∞–∑ #${order_id} (–æ—Ç @${orders[Number(order_id)].sender.username})`)
            } else {
                return await bot.answerCallbackQuery(msg.id, {show_alert: true, text: '‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ "–≤—ã–ø–æ–ª–Ω–µ–Ω" –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –ø—Ä–∏–Ω—è–ª!', callback_query_id: msg.id})
            }
        }
    
        if (data == 'price_cancel' || data == 'comment_cancel') {
            users[senderId].state = orderState.none
            return await bot.sendMessage(senderId, '–û—Ç–º–µ–Ω–µ–Ω–æ.')
        }
        if (data.includes('price:')) {
            console.log('price selected!')
            const price = data.match('price:(.+)')[1]
            if (!price) { return await bot.sendMessage(senderId, 'error, price is null') }
    
            console.log('user price set to', price, 'was', data)
            users[senderId].new_order.price = price
            users[senderId].state = orderState.message
            return await bot.sendMessage(senderId, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å <b>–ø–æ–¥—Ä–æ–±–Ω–æ</b> –æ–ø–∏—à–∏ —Ç–æ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (—É–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏, —è–∑—ã–∫ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã)', {parse_mode: 'HTML', reply_markup: JSON.stringify({inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'comment_cancel'}]]})})
        }
    } catch(err) {
        //return await bot.sendMessage(senderId, `ERROR IN 'callback_query':\n${err}`)
    }
})


const LANG = {
    RU: 0,
    EN: 1
}
const lang = LANG.RU
const text = {
    hello: [
        '–ü—Ä–∏–≤–µ—Ç',
        'Hello'
    ]
}

console.log(text.hello[lang])